
<KeyWord name="AddAdmGroupCmdOverride" func="yes">
	<Overload retVal="" descr="
Params:
    id      Group id.
    name    String containing command name (case sensitive).
    type    Override type (specific command or group).
    rule    Override allow/deny setting.

Return:
    noreturn

Notes:
    Adds a group-specific override type.
">
		<Param name="GroupId:id"/>
		<Param name="const String:name[]"/>
		<Param name="OverrideType:type"/>
		<Param name="OverrideRule:rule"/>
	</Overload>
</KeyWord>


<KeyWord name="AddCommandOverride" func="yes">
	<Overload retVal="" descr="
Params:
    cmd     String containing command name (case sensitive).
    type    Override type (specific command or group).
    flags   New admin flag.

Return:
    noreturn

Note:
    Adds a global command flag override.  Any command registered with this name
    will assume the new flag.  This is applied retroactively as well.
">
		<Param name="const String:cmd[]"/>
		<Param name="OverrideType:type"/>
		<Param name="flags"/>
	</Overload>
</KeyWord>


<KeyWord name="AdminInheritGroup" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      AdminId index of the admin.
    gid     GroupId index of the group.


Return:
    True    on success,
    false   on invalid input or duplicate membership.

Notes:
    Adds a group to an admin's inherited group list.
    Any flags the group has will be added to the admin's effective flags.
">
		<Param name="AdminId:id"/>
		<Param name="GroupId:gid"/>
	</Overload>
</KeyWord>


<KeyWord name="BindAdminIdentity" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      AdminId of the admin.
    auth    Auth method to use, predefined or from RegisterAuthIdentType().
    ident   String containing the arbitrary, unique identity.

Return:
    True    on success,
    false   if the auth method was not found, or ident was already taken.

Notes:
    Binds an admin to an identity for fast lookup later on. The bind must be unique.
">
		<Param name="AdminId:id"/>
		<Param name="const String:auth[]"/>
		<Param name="const String:ident[]"/>
	</Overload>
</KeyWord>


<KeyWord name="BitToFlag" func="yes">
	<Overload retVal="bool:" descr="
Params:
    bit     Bit to convert.
    flag    Stores the converted flag by reference.

Return:
    True    on success,
    false   otherwise.

Notes:
    Converts a bit to an AdminFlag.
">
		<Param name="bit"/>
		<Param name="&AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="CanAdminTarget" func="yes">
	<Overload retVal="" descr="
Params:
    admin   Admin doing the targetting (may be INVALID_ADMIN_ID).
    target  Target admin (may be INVALID_ADMIN_ID).

Return:
    True    if targetable,
    false   if immune.

Notes:
    Tests whether one admin can target another.

    The heuristics for this check are as follows:
    0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.

    1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.

    2. If the targeted AdminId is the same as the targeting AdminId,
    (self) targeting succeeds.

    3. If the targeting admin is root, targeting succeeds.

    4. If the targeted admin has access higher as interpreted by (sm_immunity_mode)
    than the targeting admin, then targeting fails.

    5. If the targeted admin has specific immunity
    from the targeting admin via group immunities, targeting fails.

    6. Targeting succeeds.
">
		<Param name="AdminId:admin"/>
		<Param name="AdminId:target"/>
	</Overload>
</KeyWord>


<KeyWord name="CreateAdmGroup" func="yes">
	<Overload retVal="GroupId:" descr="
Params:
    group_name  String containing the group name.

Return:
    A new group id,
    INVALID_GROUP_ID if it already exists.

Notes:
    Adds a new group.  Name must be unique.
">
		<Param name="const String:group_name[]"/>
	</Overload>
</KeyWord>


<KeyWord name="CreateAdmin" func="yes">
	<Overload retVal="AdminId:" descr="
Params:
    name    Name for this entry (does not have to be unique).
            Specify an empty string for an anonymous admin.

Return:
    A new admin id

Notes:
    Creates a new admin entry in the permissions cache.
">
		<Param name="const String:name[]=&quot;&quot;"/>
	</Overload>
</KeyWord>


<KeyWord name="CreateAuthMethod" func="yes">
	<Overload retVal="bool:" descr="
Params:
    method  Name of the authentication method.

Return:
    True    on success,
    false   on failure.

Notes:
    Creates an admin auth method.
    This does not need to be called more than once per method,
    ever.
">
		<Param name="const String:method[]"/>
	</Overload>
</KeyWord>


<KeyWord name="DumpAdminCache" func="yes">
	<Overload retVal="" descr="
Params:
    part        Part of the cache to dump.  Specifying groups also dumps admins.
    rebuild     If true, the rebuild forwards will fire.

Return:
    noreturn

Notes:
    Tells the admin system to dump a portion of the cache.
">
		<Param name="AdminCachePart:part"/>
		<Param name="bool:rebuild"/>
	</Overload>
</KeyWord>


<KeyWord name="FindAdmGroup" func="yes">
	<Overload retVal="GroupId:" descr="
Params:
	group_name	String containing the group name.
	rebuild		If true, the rebuild forwards will fire.

Return:
	A group id,
	or INVALID_GROUP_ID if not found.

Notes:
	Finds a group by name.
">
		<Param name="const String:group_name[]"/>
	</Overload>
</KeyWord>


<KeyWord name="FindAdminByIdentity" func="yes">
	<Overload retVal="AdminId:" descr="
Params:
    auth        Auth method to try.
    identity    Identity string to look up.

Return:
    An AdminId index if found,
    INVALID_ADMIN_ID otherwise.

Notes:
    Attempts to find an admin by an auth method and an identity.
">
		<Param name="const String:auth[]"/>
		<Param name="const String:identity[]"/>
	</Overload>
</KeyWord>


<KeyWord name="FindFlagByChar" func="yes">
	<Overload retVal="bool:" descr="
Params:
    c       Flag ASCII character/token.
    flag    Variable to store flag in.

Return:
    True    on success,
    false   if not found.

Notes:
    Finds a flag by a given character.
">
		<Param name="c"/>
		<Param name="&AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="FindFlagByName" func="yes">
	<Overload retVal="bool:" descr="
Params:
    name    Flag name (like &quot;kick&quot;), case sensitive.
    flag    Variable to store flag in.

Return:
    True    on success,
    false   if not found.

Notes:
    Finds a flag by its string name.
">
		<Param name="const String:name[]"/>
		<Param name="&AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="FindFlagChar" func="yes">
	<Overload retVal="bool:" descr="
Params:
    flag    Flag to look up.
    c       Variable to store flag char.

Return:
    True    on success,
    false   if not found.

Notes:
    Finds a flag char by a gived admin flag.
">
		<Param name="AdminFlag:flag"/>
		<Param name="&c"/>
	</Overload>
</KeyWord>


<KeyWord name="FlagArrayToBits" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array containing flags that are enabled.
    numFlags    Number of flags in the array.

Return:
    A bit string composed of the array flags.

Notes:
    Converts an array of flags to bits.
">
		<Param name="const AdminFlag:array[]"/>
		<Param name="numFlags"/>
	</Overload>
</KeyWord>


<KeyWord name="FlagBitArrayToBits" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array containing true or false for each AdminFlag.
    maxSize     Maximum size of the flag array.

Return:
    A bit string composed of the array bits.

Notes:
    Converts a flag array to a bit string.
">
		<Param name="const bool:array[]"/>
		<Param name="maxSize"/>
	</Overload>
</KeyWord>


<KeyWord name="FlagBitsToArray" func="yes">
	<Overload retVal="bool:" descr="
Params:
    bit     Bit to convert.
    flag    Stores the converted flag by reference.

Return:
    True    on success,
    false   otherwise.

Notes:
    Converts a bit to an AdminFlag.
">
		<Param name="bit"/>
		<Param name="&AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="FlagBitsToBitArray" func="yes">
	<Overload retVal="" descr="
Params:
    bits        Bit string containing the flags.
    array       Array to write the flags to.  Enabled flags will be 'true'.
    maxSize     Maximum number of flags the array can store.

Return:
    Number of flags written.

Notes:
    Converts a flag bit string to a bit array.
">
		<Param name="bits"/>
		<Param name="bool:array[]"/>
		<Param name="maxSize"/>
	</Overload>
</KeyWord>


<KeyWord name="FlagToBit" func="yes">
	<Overload retVal="" descr="
Params:
    flag    Flag to convert.

Return:
    Bit representation of the flag.

Notes:
    Converts a flag to its single bit.
">
		<Param name="AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupAddFlag" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      Group id.
    flag    Admin flag to retrieve.

Return:
    True    if enabled,
    false   otherwise.

Notes:
    Gets the set value of an add flag on a group's flag set.
    These are called &quot;add flags&quot; because they add to a user's flags.
">
		<Param name="GroupId:id"/>
		<Param name="AdminFlag:flag"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupAddFlags" func="yes">
	<Overload retVal="" descr="
Params:
    id      Group id.
    flag    Admin flag to retrieve.

Return:
    True    if enabled,
    false   otherwise.

Notes:
    Returns the flag set that is added to a user from their group.
    These are called &quot;add flags&quot; because they add to a user's flags.
">
		<Param name="GroupId:id"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupCmdOverride" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      Group id.
    name    String containing command name (case sensitive).
    type    Override type (specific command or group).
    rule    Optional pointer to store allow/deny setting.

Return:
    True    if an override exists,
    false   otherwise.

Notes:
    Retrieves a group-specific command override.
">
		<Param name="GroupId:id"/>
		<Param name="const String:name[]"/>
		<Param name="OverrideType:type"/>
		<Param name="&OverrideRule:rule"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupImmuneCount" func="yes">
	<Overload retVal="" descr="
Params:
    id      Group id.

Return:
    Number of group immunities.

Notes:
    Returns the number of specific group immunities.
">
		<Param name="GroupId:id"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupImmuneFrom" func="yes">
	<Overload retVal="GroupId:" descr="
Params:
    id      Group id.
    number  Index from 0 to N-1, from GetAdmGroupImmuneCount().

Return:
    GroupId that this group is immune to,
    or INVALID_GROUP_ID on failure.

Notes:
    Returns a group that this group is immune to given an index.
">
		<Param name="GroupId:id"/>
		<Param name="number"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupImmunity" func="yes">
	<Overload retVal="bool:" descr="
Deprecated:
    Functionality removed.
    Use GetAdmGroupImmunityLevel() instead.
">
		<Param name="GroupId:id"/>
		<Param name="ImmunityType:type"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdmGroupImmunityLevel" func="yes">
	<Overload retVal="" descr="
Params:
    gid     Group id.

Return:
    Immunity level value.

Notes:
    Gets a group's immunity level (defaults to 0).
">
		<Param name="GroupId:gid"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminFlag" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      AdminId index of the admin.
    flag    Admin flag to use.
    mode    Access mode to check.

Return:
    True    if enabled,
    false   otherwise.

Notes:
    Returns whether or not a flag is enabled on an admin.
">
		<Param name="AdminId:id"/>
		<Param name="AdminFlag:flag"/>
		<Param name="AdmAccessMode:mode=Access_Effective"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminFlags" func="yes">
	<Overload retVal="" descr="
Params:
    id      AdminId index of the admin.
    mode    Access mode to use.

Return:
    A bitstring containing which flags are enabled.

Notes:
    Returns the bitstring of access flags on an admin.
">
		<Param name="AdminId:id"/>
		<Param name="AdmAccessMode:mode"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminGroup" func="yes">
	<Overload retVal="GroupId:" descr="
Params:
    id          AdminId index of the admin.
    index       Group number to retrieve, from 0 to N-1, where N
                is the value of GetAdminGroupCount(id).
    name        Buffer to store the group's name.
                Note: This will safely chop UTF-8 strings.
    maxlength   Maximum size of the output name buffer.

Return:
    A GroupId index and a name pointer,
    or INVALID_GROUP_ID and NULL if an error occurred.

Notes:
    Returns group information from an admin.
">
		<Param name="AdminId:id"/>
		<Param name="index"/>
		<Param name="const String:name[]"/>
		<Param name="maxlength"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminGroupCount" func="yes">
	<Overload retVal="" descr="
Params:
    id      AdminId index of the admin.

Return:
    Number of groups this admin is a member of.

Notes:
    Returns the number of groups this admin is a member of.
">
		<Param name="AdminId:id"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminImmunityLevel" func="yes">
	<Overload retVal="" descr="
Params:
    id      Admin Id.

Return:
    Immunity level value.

Notes:
    Gets an admin's immunity level.
">
		<Param name="AdminId:id"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminPassword" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id          AdminId index of the admin.
    buffer      Optional buffer to store the admin's password.
                Note: This will safely chop UTF-8 strings.
    maxlength   Maximum size of the output name buffer.

Return:
    True    if there was a password set,
    false   otherwise.

Notes:
    Gets an admin's password.
">
		<Param name="AdminId:id"/>
		<Param name="String:buffer[]=&quot;&quot;"/>
		<Param name="maxlength=0"/>
	</Overload>
</KeyWord>


<KeyWord name="GetAdminUsername" func="yes">
	<Overload retVal="" descr="
Params:
    id          AdminId of the admin.
    name        String buffer to store name.
    maxlength   Maximum size of string buffer.

Return:
    Number of bytes written.

Notes:
    Retrieves an admin's user name as made with CreateAdmin().
    This function can return UTF-8 strings, and will safely chop UTF-8 strings.
">
		<Param name="AdminId:id"/>
		<Param name="String:name[]"/>
		<Param name="maxlength"/>
	</Overload>
</KeyWord>


<KeyWord name="GetCommandOverride" func="yes">
	<Overload retVal="bool:" descr="
Params:
    cmd     String containing command name (case sensitive).
    type    Override type (specific command or group).
    flags   By-reference cell to store the flag (undefined if not found).

Return:
    True    if there is an override,
    false   otherwise.

Notes:
    Returns a command override.
">
		<Param name="const String:cmd[]"/>
		<Param name="OverrideType:type"/>
		<Param name="&flags"/>
	</Overload>
</KeyWord>


<KeyWord name="OnRebuildAdminCache" func="yes">
	<Overload retVal="public" descr="
Params:
    part    Part of the admin cache to rebuild.

Notes:
    Called when part of the cache needs to be rebuilt.
">
		<Param name="AdminCachePart:part"/>
	</Overload>
</KeyWord>


<KeyWord name="ReadFlagString" func="yes">
	<Overload retVal="" descr="
Params:
    flags       Flag ASCII string.
    numchars    Optional variable to store the number of bytes read.

Return:
    Bit string of ADMFLAG values.

Notes:
    Converts a string of flag characters to a bit string.
">
		<Param name="const String:flags[]"/>
		<Param name="&numchars=0"/>
	</Overload>
</KeyWord>


<KeyWord name="RegisterAuthIdentType" func="yes">
	<Overload retVal="" descr="
Params:
    name    Codename to use for your authentication type.

Return:
    noreturn

Notes:
    Registers an authentication identity type.
    You normally never need to call this except for very specific systems.
">
		<Param name="const String:name[]"/>
	</Overload>
</KeyWord>


<KeyWord name="RemoveAdmin" func="yes">
	<Overload retVal="bool:" descr="
Params:
    id      AdminId index to remove/invalidate.

Return:
    True    on success,
    false   otherwise.

Notes:
    Removes an admin entry from the cache.
    This will remove any bindings to a specific user.
">
		<Param name="AdminId:id"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdmGroupAddFlag" func="yes">
	<Overload retVal="" descr="
Params:
    id          Group id.
    flag        Admin flag to toggle.
    enabled     True to set the flag, false to unset/disable.

Return:
    noreturn

Notes:
    Adds or removes a flag from a group's flag set.
    These are called &quot;add flags&quot; because they add to a user's flags.
">
		<Param name="GroupId:id"/>
		<Param name="AdminFlag:flag"/>
		<Param name="bool:enabled"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdmGroupImmuneFrom" func="yes">
	<Overload retVal="" descr="
Params:
    id          Group id.
    other_id    Group id to receive immunity to.

Return:
    noreturn

Notes:
    Adds immunity to a specific group.
">
		<Param name="GroupId:id"/>
		<Param name="GroupId:other_id"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdmGroupImmunity" func="yes">
	<Overload retVal="" descr="
Deprecated:
    Functionality removed.
    Use SetAdmGroupImmunityLevel() instead.
">
		<Param name="GroupId:id"/>
		<Param name="ImmunityType:type"/>
		<Param name="bool:enabled"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdmGroupImmunityLevel" func="yes">
	<Overload retVal="" descr="
Params:
    gid     Group Id.
    level   Immunity level value.

Return:
    Old immunity level value.

Notes:
    Sets a group's immunity level.
">
		<Param name="GroupId:gid"/>
		<Param name="level"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdminFlag" func="yes">
	<Overload retVal="" descr="
Params:
    id          AdminId index of the admin.
    flag        Admin flag to use.
    enabled     True to enable, false to disable.

Return:
    noreturn

Notes:
    Sets whether or not a flag is enabled on an admin.
">
		<Param name="AdminId:id"/>
		<Param name="AdminFlag:flag"/>
		<Param name="bool:enabled"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdminImmunityLevel" func="yes">
	<Overload retVal="" descr="
Params:
    id      Admin Id.
    level   Immunity level value.

Return:
    Old immunity level value.

Notes:
    Sets an admin's immunity level.
">
		<Param name="AdminId:id"/>
		<Param name="level"/>
	</Overload>
</KeyWord>


<KeyWord name="SetAdminPassword" func="yes">
	<Overload retVal="" descr="
Params:
    id          AdminId index of the admin.
    password    String containing the password.

Return:
    noreturn

Notes:
    Sets a password on an admin.
">
		<Param name="AdminId:id"/>
		<Param name="const String:password[]"/>
	</Overload>
</KeyWord>


<KeyWord name="UnsetCommandOverride" func="yes">
	<Overload retVal="" descr="
Params:
    cmd     String containing command name (case sensitive).
    type    Override type (specific command or group).

Return:
    noreturn

Notes:
    Unsets a command override.
">
		<Param name="const String:cmd[]"/>
		<Param name="OverrideType:type"/>
	</Overload>
</KeyWord>



