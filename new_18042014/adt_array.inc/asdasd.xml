

<KeyWord name="ByteCountToCells" func="yes">
	<Overload retVal="" descr="
Params:
    size    Number of bytes.

Return:
    Minimum number of cells required to fit the byte count.

Notes:
    Given a maximum string size (including the null terminator),
    returns the number of cells required to fit that string.
">
		<Param name="size"/>
	</Overload>
</KeyWord>

<KeyWord name="ClearArray" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.

Return:
    noreturn

Error:
    Invalid Handle.

Notes:
    Clears an array of all entries.
    This is the same as ResizeArray(0).
">
		<Param name="Handle:array"/>
	</Overload>
</KeyWord>

<KeyWord name="CloneArray" func="yes">
	<Overload retVal="Handle:" descr="
Params:
    array   Array handle to be cloned

Return:
    New handle to the cloned array object

Error:
    Invalid Handle.

Notes:
    Clones an array, returning a new handle with the same size and data.
    This should NOT be confused with CloneHandle.
    This is a completely new handle with the same data but no relation
    to the original. You MUST close it.
">
		<Param name="Handle:array"/>
	</Overload>
</KeyWord>

<KeyWord name="CreateArray" func="yes">
	<Overload retVal="Handle:" descr="
Params:
    blocksize   The number of cells each member of the array can hold.
                For example, 32 cells is equivalent to: new Array[X][32]
    startsize   Initial size of the array.
                Note that data will NOT be auto-intialized.

Return:
    New Handle to the array object.

Notes:
    Creates a dynamic global cell array.
    While slower than a normal array, it can be used globally AND dynamically,
    which is otherwise impossible.

    The contents of the array are uniform; i.e. storing a string at index X
    and then retrieving it as an integer is NOT the same as StringToInt()!
    The &quot;blocksize&quot; determines how many cells each array slot has; it cannot
    be changed after creation.
">
		<Param name="blocksize=1"/>
		<Param name="startsize=0"/>
	</Overload>
</KeyWord>

<KeyWord name="FindStringInArray" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    item    String to search for

Return:
    Array index, or -1 on failure

Error:
    Invalid Handle

Notes:
    Returns the index for the first occurance of the provided string.
    If the string cannot be located, -1 will be returned.
">
		<Param name="Handle:array"/>
		<Param name="const String:item[]"/>
	</Overload>
</KeyWord>

<KeyWord name="FindValueInArray" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    item    Value to search for

Return:
    Array index, or -1 on failure

Error:
    Invalid Handle

Notes:
    Returns the index for the first occurance of the provided value.
    If the value cannot be located, -1 will be returned.
">
		<Param name="Handle:array"/>
		<Param name="any:item"/>
	</Overload>
</KeyWord>

<KeyWord name="GetArrayArray" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    index       Index in the array.
    buffer      Buffer to store the array in.
    size        If not set, assumes the buffer size is equal to the blocksize.
                Otherwise, the size passed is used.

Return:
    Number of cells copied.

Error:
    Invalid Handle or invalid index.

Notes:
    Retrieves an array of cells from an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="any:buffer[]"/>
		<Param name="size=-1"/>
	</Overload>
</KeyWord>

<KeyWord name="GetArrayCell" func="yes">
	<Overload retVal="any:" descr="
Params:
    array       Array Handle.
    index       Index in the array.
    block       Optionally specify which block to read from
                (useful if the blocksize > 0).
    asChar      Optionally read as a byte instead of a cell.

Return:
    Value read.

Error:
    Invalid Handle, invalid index, or invalid block.

Notes:
    Retrieves a cell value from an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="block=0"/>
		<Param name="bool:asChar=false"/>
	</Overload>
</KeyWord>

<KeyWord name="GetArraySize" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.

Return:
    Number of elements in the array.

Error:
    Invalid Handle.

Notes:
    Returns the array size.
">
		<Param name="Handle:array"/>
	</Overload>
</KeyWord>

<KeyWord name="GetArrayString" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    index       Index in the array.
    buffer      Buffer to copy to.
    maxlength   Maximum size of the buffer.

Return:
    Number of characters copied.

Error:
    Invalid Handle or invalid index.

Notes:
    Retrieves a string value from an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="String:buffer[]"/>
		<Param name="maxlength"/>
	</Overload>
</KeyWord>

<KeyWord name="PushArrayArray" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    values      Block of values to copy.
    size        If not set, the number of elements copied from the array
                will be equal to the blocksize.
                If set higher than the blocksize, the operation will be truncated.

Return:
    Index of the new entry.

Error:
    Invalid Handle or out of memory.

Notes:
    Pushes an array of cells onto the end of an array.
    The cells are pushed as a block (i.e. the entire array sits at the index),
    rather than pushing each cell individually.
">
		<Param name="Handle:array"/>
		<Param name="const any:values[]"/>
		<Param name="size=-1"/>
	</Overload>
</KeyWord>

<KeyWord name="PushArrayCell" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    value   Value to push.

Return:
    Index of the new entry.

Error:
    Invalid Handle or out of memory.

Notes:
    Pushes a value onto the end of an array, adding a new index.
    This may safely be used even if the array has a blocksize
    greater than 1.
">
		<Param name="Handle:array"/>
		<Param name="any:value"/>
	</Overload>
</KeyWord>

<KeyWord name="PushArrayString" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    value   String to push.

Return:
    Index of the new entry.

Error:
    Invalid Handle or out of memory.

Notes:
    Pushes a string onto the end of an array,
    truncating it if it is too big.
">
		<Param name="Handle:array"/>
		<Param name="const String:value[]"/>
	</Overload>
</KeyWord>

<KeyWord name="RemoveFromArray" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    index   Index in the array to remove at.

Return:
    noreturn

Error:
    Invalid Handle or invalid index.

Notes:
    Removes an array index, shifting the entire array down from that position on.
    For example, if item 8 of 10 is removed, the last 3 items will then be
    (6,7,8) instead of (7,8,9), and all indexes before 8 will remain unchanged.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
	</Overload>
</KeyWord>

<KeyWord name="ResizeArray" func="yes">
	<Overload retVal="bool:" descr="
Params:
    array       Array Handle.
    newsize     New size.

Return:
    noreturn

Error:
    Invalid Handle or out of memory.

Notes:
    Resizes an array.  If the size is smaller than the current size,
    the array is truncated.
">
		<Param name="Handle:array"/>
		<Param name="newsize"/>
	</Overload>
</KeyWord>

<KeyWord name="SetArrayArray" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    index       Index in the array.
    values      Array to copy.
    size        If not set, assumes the buffer size is equal to the
                blocksize.  Otherwise, the size passed is used.

Return:
    Number of cells copied.

Error:
    Invalid Handle or invalid index.

Notes:
    Sets an array of cells in an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="const any:values[]"/>
		<Param name="size=-1"/>
	</Overload>
</KeyWord>

<KeyWord name="SetArrayCell" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    index       Index in the array.
    value       Cell value to set.
    block       Optionally specify which block to write to
                (useful if the blocksize > 0).
    asChar      Optionally set as a byte instead of a cell.

Return:
    noreturn

Error:
    Invalid Handle, invalid index, or invalid block.

Notes:
    Sets a cell value in an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="any:value"/>
		<Param name="block=0"/>
		<Param name="bool:asChar=false"/>
	</Overload>
</KeyWord>

<KeyWord name="SetArrayString" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    index   Index in the array.
    value   String value to set.

Return:
    Number of characters copied.

Error:
    Invalid Handle or invalid index.

Notes:
    Sets a string value in an array.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
		<Param name="const String:value[]"/>
	</Overload>
</KeyWord>

<KeyWord name="ShiftArrayUp" func="yes">
	<Overload retVal="" descr="
Params:
    array   Array Handle.
    index   Index in the array to shift up from.

Return:
    noreturn

Error:
    Invalid Handle or invalid index.

Notes:
    Shifts an array up.  All array contents after and including the given
    index are shifted up by one, and the given index is then &quot;free&quot;.
    After shifting, the contents of the given index is undefined.
">
		<Param name="Handle:array"/>
		<Param name="index"/>
	</Overload>
</KeyWord>

<KeyWord name="SwapArrayItems" func="yes">
	<Overload retVal="" descr="
Params:
    array       Array Handle.
    index1      First index.
    index2      Second index.

Return:
    noreturn

Error:
    Invalid Handle or invalid index.

Notes:
    Swaps two items in the array.
">
		<Param name="Handle:array"/>
		<Param name="index1"/>
		<Param name="index2"/>
	</Overload>
</KeyWord>
