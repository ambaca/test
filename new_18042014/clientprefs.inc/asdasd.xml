

<KeyWord name="AreClientCookiesCached" func="yes">
	<Overload retVal="bool:" descr="
Params:
    client  Client index.

Return:
    True    if loaded,
    false   otherwise.

Error:
    Invalid client index.

Notes:
    Checks if a clients cookies have been loaded from the database.
">
		<Param name="client"/>
	</Overload>
</KeyWord>

<KeyWord name="CookieMenuHandler" func="yes">
	<Overload retVal="public" descr="
Params:
    client      Client index.
    action      CookieMenuAction being performed.
    info        Info data passed.
    buffer      Outbut buffer.
    maxlen      Max length of the output buffer.

Notes:
    Cookie Menu Callback prototype
">
		<Param name="client"/>
		<Param name="CookieMenuAction:action"/>
		<Param name="any:info"/>
		<Param name="String:buffer[]"/>
		<Param name="maxlen"/>
	</Overload>
</KeyWord>

<KeyWord name="FindClientCookie" func="yes">
	<Overload retVal="Handle:" descr="
Params:
    name    Name of cookie to find.

Return:
    A handle to the cookie if it is found.
    INVALID_HANDLE otherwise.

Notes:
    Searches for a Client preference cookie.
    Handles returned by FindClientCookie
    can be closed via CloseHandle() when no longer needed.
">
		<Param name="const String:name[]"/>
	</Overload>
</KeyWord>

<KeyWord name="GetClientCookie" func="yes">
	<Overload retVal="" descr="
Params:
    client      Client index.
    cookie      Client preference cookie handle.
    buffer      Copyback buffer for value.
    maxlen      Maximum length of the buffer.

Return:
    noreturn

Error:
    Invalid cookie handle or invalid client index.

Notes:
    Retrieve the value of a Client preference cookie.
">
		<Param name="client"/>
		<Param name="Handle:cookie"/>
		<Param name="String:buffer[]"/>
		<Param name="maxlen"/>
	</Overload>
</KeyWord>

<KeyWord name="GetClientCookieTime" func="yes">
	<Overload retVal="" descr="
Params:
    client      Client index.
    cookie      Cookie handle.

Return:
    Last updated timestamp.

Notes:
    Returns the last updated timestamp for a client cookie
">
		<Param name="client"/>
		<Param name="Handle:cookie"/>
	</Overload>
</KeyWord>

<KeyWord name="GetCookieAccess" func="yes">
	<Overload retVal="CookieAccess:" descr="
Params:
    cookie      Client preference cookie handle.

Return:
    CookieAccess access level.

Error:
    Invalid cookie handle.

Notes:
    Returns the access level of a cookie
">
		<Param name="Handle:cookie"/>
	</Overload>
</KeyWord>

<KeyWord name="GetCookieIterator" func="yes">
	<Overload retVal="Handle:" descr="
Return:
    A new cookie iterator.

Notes:
    Gets a cookie iterator.  Must be freed with CloseHandle().
">
		<Param name=""/>
	</Overload>
</KeyWord>

<KeyWord name="OnClientCookiesCached" func="yes">
	<Overload retVal="public" descr="
Params:
    client  Client index.

Notes:
    Called once a client's saved cookies have been loaded from the database.
">
		<Param name="client"/>
	</Overload>
</KeyWord>

<KeyWord name="ReadCookieIterator" func="yes">
	<Overload retVal="bool:" descr="
Params:
    iter        Cookie iterator Handle.
    name        Name buffer.
    nameLen     Name buffer size.
    access      Access level of the cookie.
    desc        Cookie description buffer.
    descLen     Cookie description buffer size.

Return:
    True    on success,
    false   if there are no more commands.

Notes:
    Reads a cookie iterator, then advances to the next cookie if any.
">
		<Param name="Handle:iter"/>
		<Param name="
                          String:name[]"/>
		<Param name="
                          nameLen"/>
		<Param name="
                          &CookieAccess:access"/>
		<Param name="
                          String:desc[]=&quot;&quot;"/>
		<Param name="
                          descLen=0"/>
	</Overload>
</KeyWord>

<KeyWord name="RegClientCookie" func="yes">
	<Overload retVal="Handle:" descr="
Params:
    name            Name of the new preference cookie.
    description     Optional description of the preference cookie.
    access          What CookieAccess level to assign to this cookie.

Return:
    A handle to the newly created cookie.
    If the cookie already exists, a handle to it will still be returned.

Error:
    Cookie name is blank.

Notes:
    Creates a new Client preference cookie.
    Handles returned by RegClientCookie can be closed via CloseHandle() when
    no longer needed.
">
		<Param name="const String:name[]"/>
		<Param name="const String:description[]"/>
		<Param name="CookieAccess:access"/>
	</Overload>
</KeyWord>

<KeyWord name="SetAuthIdCookie" func="yes">
	<Overload retVal="" descr="
Params:
    authID      String Auth/STEAM ID of player to set.
    cookie      Client preference cookie handle.
    value       String value to set.

Return:
    noreturn

Error:
    Invalid cookie handle.

Notes:
    Sets the value of a Client preference cookie based on an authID string.
">
		<Param name="const String:authID[]"/>
		<Param name="Handle:cookie"/>
		<Param name="const String:value[]"/>
	</Overload>
</KeyWord>

<KeyWord name="SetClientCookie" func="yes">
	<Overload retVal="" descr="
Params:
    client      Client index.
    cookie      Client preference cookie handle.
    value       String value to set.

Return:
    noreturn

Error:
    Invalid cookie handle or invalid client index.

Notes:
    Set the value of a Client preference cookie.
">
		<Param name="client"/>
		<Param name="Handle:cookie"/>
		<Param name="const String:value[]"/>
	</Overload>
</KeyWord>

<KeyWord name="SetCookieMenuItem" func="yes">
	<Overload retVal="" descr="
Params:
    handler     A MenuHandler callback function.
    info        Data to pass to the callback.
    display     Text to show on the menu.

Return:
    noreturn

Error:
    Invalid cookie handle.

Notes:
    Adds a new item to the client cookie settings menu.
    Note: This only adds the top level menu item.
    You need to handle any submenus from the callback.
">
		<Param name="CookieMenuHandler:handler"/>
		<Param name="any:info"/>
		<Param name="const String:display[]"/>
	</Overload>
</KeyWord>

<KeyWord name="SetCookiePrefabMenu" func="yes">
	<Overload retVal="" descr="
Params:
    cookie      Client preference cookie handle.
    type        A CookieMenu prefab menu type.
    display     Text to show on the menu.
    handler     Optional handler callback for translations and output on selection
    info        Info data to pass to the callback.

Return:
    noreturn

Error:
    Invalid cookie handle.

Notes:
    Add a new prefab item to the client cookie settings menu.
    Note: This handles everything automatically and does not require a callback
">
		<Param name="Handle:cookie"/>
		<Param name="CookieMenu:type"/>
		<Param name="const String:display[]"/>
		<Param name="CookieMenuHandler:handler=CookieMenuHandler:-1"/>
		<Param name="info=0"/>
	</Overload>
</KeyWord>

<KeyWord name="ShowCookieMenu" func="yes">
	<Overload retVal="" descr="
Params:
    client  Client index.

Return:
    noreturn

Notes:
    Displays the settings menu to a client.
">
		<Param name="client"/>
	</Overload>
</KeyWord>